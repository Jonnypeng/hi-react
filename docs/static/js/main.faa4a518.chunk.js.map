{"version":3,"sources":["Layout.tsx","pages/Home/index.tsx","pages/TextToSound/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Layout","Container","this","props","children","Component","displayName","name","Home","TextToSoundState","TextToSound","text","speed","audioUrl","downEl","audio","Audio","state","result","encodeURI","play","getRes","src","href","download","Date","now","toString","url","getUrl","Promise","resolve","fetch","method","responseType","then","res","blob","resUrl","window","URL","createObjectURL","Row","Col","md","span","offset","xs","Form","Control","as","rows","placeholder","onChange","e","target","value","type","step","min","max","className","Button","variant","size","onClick","getSound","bind","ref","App","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.faa4a518.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nexport default class Layout extends Component {\r\n  static displayName = Layout.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <Container>\r\n        {this.props.children}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\n\n\n\nexport default class Home extends Component<any>{\n    render() {\n        return <></> \n    }\n}","import React, { Component } from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap';\ninterface TextToSoundProps extends RouteComponentProps {\n}\nclass TextToSoundState {\n    //downHref:string = \"\";\n}\n\nexport default class TextToSound extends Component<TextToSoundProps, TextToSoundState>{\n    private text: string = \"\";\n    private speed: string = \"5\";\n    private audioUrl: string = \"\";\n    private downEl: HTMLAnchorElement | null = null;\n    audio: HTMLAudioElement = new Audio();\n    constructor(props: TextToSoundProps) {\n        super(props);\n        this.state = new TextToSoundState();\n    }\n\n\n    private getUrl(speed: string, text: string): string {\n        let result: string = `http://tts.baidu.com/text2audio?lan=en&ie=UTF-8&spd=${speed}&text=${text}`;\n        result = encodeURI(result);\n        return result;\n    }\n\n    private async getSound(play: boolean) {\n        this.audioUrl = await this.getRes(this.speed, this.text);\n        this.audio.src = this.audioUrl;\n        if (play) {\n            this.audio.play();\n        }\n        (this.downEl as HTMLAnchorElement).href = this.audioUrl;\n        (this.downEl as HTMLAnchorElement).download = Date.now().toString() + \".mp3\";\n    }\n\n    private getRes(speed: string, text: string): Promise<string> {\n        let url = this.getUrl(speed, text);\n        return new Promise((resolve) => {\n            fetch(url, ({\n                method: 'get',\n                responseType: 'blob'\n            } as any)).then(res => {\n                return res.blob();\n            }).then(blob => {\n                let resUrl: string = window.URL.createObjectURL(blob);\n                resolve(resUrl);\n            })\n        })\n    }\n\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <Col md={{span:6,offset:3}} xs={12}>\n                        <h4>TTS应用</h4>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col  md={{span:6,offset:3}} xs={12}>\n                        <Form.Control as=\"textarea\" rows={5} placeholder={\"请输入英文字符\"} onChange={e => { this.text = e.target.value }} />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={{span:6,offset:3}} xs={12}>\n                        <Form.Control type=\"range\" onChange={e => { this.speed = e.target.value }} step={1} min={1} max={9} />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={{offset:3,span:2}} xs={4} className=\"flex-center\">\n                        <Button variant=\"primary\" size=\"lg\" onClick={this.getSound.bind(this, false)}>获取</Button>\n                    </Col>\n                    <Col md={{span:2}}  xs={4} className=\"flex-center\">\n                        <Button variant=\"success\" size=\"lg\" onClick={this.getSound.bind(this, true)}>播放</Button>\n                    </Col>\n                    <Col md={{span:2}}  xs={4} className=\"flex-center\">\n                        <Button variant=\"outline-danger\" size=\"lg\">\n                            <a ref={ref => { this.downEl = ref }}>下载</a>\n                        </Button>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}","import React from 'react';\nimport {Route,BrowserRouter as Router} from 'react-router-dom';\nimport Layout from './Layout';\nimport Home from './pages/Home/';\nimport './App.css';\nimport TextToSound from './pages/TextToSound';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Router>\n           <Route path='/home' component={Home} />\n           <Route path='/tts' component={TextToSound} />\n        </Router>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}